import numpy as np

def LUfact(A):
    n = len(A)
    U = np.zeros((n,n))
    L = np.identity(n)
    
    U[0] = A[0]
    
    for i in range(n):
        if A[i][i] == 0:
            print("zero pivot encountered")
            break
        for j in range(i+1, n):
            mult = A[j][i]/A[i][i]
            L[j][i] = mult
            for k in range(i, n):
                A[j][k] = A[j][k] - mult*A[i][k]
                U[j][k] = A[j][k]
          
    print("U = ", U)
    print("L = ", L)
#    print("A = ", A)
    
def LUsolve(A, b):
# FACTORIZE A = LU 
    n = len(b)
    U = np.zeros((n,n))
    L = np.identity(n)

    U[0] = A[0]
    
    for i in range(n):
        if A[i, i] == 0:
            print("zero pivot encountered")
            break
        for j in range(i+1, n):
            mult = A[j, i]/A[i, i]
            L[j, i] = mult
            for k in range(i, n):
                A[j, k] = A[j, k] - mult*A[i, k]
                U[j, k] = A[j, k]
                
    print("U = ", U)
    print("L = ", L)

#SOLVE Lc = b FOR c  
    c = np.empty((n, 1))
    for j in range(0, n):
#        print("j = ", j)
        for i in range(n-1, j):
#            print("i = ", i)
            b[j] = b[j] - L[j, i]*c[i]
        c[j] = b[j]/L[j, j]
    print("c = ", c)
        
#SOLVE Ux = c FOR x
    x = np.empty((n, 1))
    for j in range(n-1, -1, -1):
        for i in range(j+1, n):
            c[j] = c[j] - U[j, i]*x[i]
        x[j] = c[j]/U[j, j]
    print("x = ", x)
