import NaiveGaussianElimination as naivegauss

n = int(input("Enter the size of your sqaure matrix: "))
A = np.zeros((n,n))
b = np.ones((n, 1))
x = np.zeros((n, 1))
xa = np.zeros((n, 1))

for m in range(n):
    for p in range(n):
        A[p][m] = 5/((p+1) + 2*(m+1) - 1)

print("A = ", A)
        
condition = np.linalg.cond(A, np.inf)
print("cond(A) = ", condition)

xa = naivegauss.ngauss(A, b, xa, n)

for m in range(n):
    for p in range(n):
        A[p][m] = 5/((p+1) + 2*(m+1) - 1)
b = np.ones((n,1))

r = b - np.dot(A, xa)
print("r = ", r)

#How would I compute x, the exact solution to the system? Do I need to do this manually?
F = x - xa
FE = np.linalg.norm(F, np.inf)
print("Forward Error = ", FE)

BE = np.linalg.norm(r, np.inf)
print("Backward Error = ", BE)

bnorm = np.linalg.norm(b, np.inf)
xnorm = np.linalg.norm(x, np.inf)

EM = (FE/xnorm)/(BE/bnorm)
print("Error Magnification Factor = ", EM)
