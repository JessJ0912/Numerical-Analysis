import numpy as np

#Solves system of linear equations: Ax=b
#n = number of linear equations (order of square matrix)
#A = coefficient matrix
#B = product

#i referes to column
#j refers to row

#NAIVE GAUSSIAN ELIMINATION
def ngauss(A, b, x, n):
    for i in range(n):
        if A[i][i] == 0:
            print("zero pivot encountered")
            break
        for j in range(i+1, n):
            mult = A[j][i]/A[i][i]
            for k in range(i+1, n):
                A[j][k] = A[j][k] - mult*A[i][k]
            b[j] = b[j] - mult*b[i]

#    print("A = ", A)
#    print("b = ", b)

#BACK SUBSTITUTION
    for j in range(n-1, -1, -1):
        for i in range(j+1, n):
            b[j] = b[j] - A[j][i]*x[i]
        x[j] = b[j]/A[j][j]

    print("x = ", x)
    
